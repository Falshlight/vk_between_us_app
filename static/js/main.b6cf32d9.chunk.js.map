{"version":3,"sources":["img/icon.svg","panels/Home.js","panels/utils.js","App.js","index.js"],"names":["module","exports","require","getFriends","osName","platform","IOS","ANDROID","App","bridge","send","ReactDOM","render","document","getElementById"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,0iBC2BnCC,EAAQ,KCfDC,ICQTC,EAASC,cACoBC,IACIC,IAa/BL,EAAQ,KAAhB,IAqOeM,EAnOH,WA0NX,OAAO,4FCrPRC,IAAOC,KAAK,gBAEZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b6cf32d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.a8534fd6.svg\";","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel';\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';\nimport Button from '@vkontakte/vkui/dist/components/Button/Button';\nimport Group from '@vkontakte/vkui/dist/components/Group/Group';\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell';\nimport Div from '@vkontakte/vkui/dist/components/Div/Div';\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar';\nimport Header from '@vkontakte/vkui/dist/components/Header/Header';\nimport Select from '@vkontakte/vkui/dist/components/Select/Select';\nimport RichCell from '@vkontakte/vkui/dist/components/RichCell/RichCell';\nimport RangeSlider from \"@vkontakte/vkui/dist/components/RangeSlider/RangeSlider\";\nimport {FormLayout, FormLayoutGroup, Input, ModalCard, ModalRoot, ModalPage} from '@vkontakte/vkui';\n\nimport './utils';\nimport './Home.css';\n//import './Friends.css';\nimport getFriends, {backend_url} from \"./utils\";\nimport Checkbox from \"@vkontakte/vkui/dist/components/Checkbox/Checkbox\";\nimport Switch from \"@vkontakte/vkui/dist/components/Switch/Switch\";\nimport Icon24Filter from \"@vkontakte/icons/dist/24/filter\";\nimport Search from \"@vkontakte/vkui/dist/components/Search/Search\";\nimport List from \"@vkontakte/vkui/dist/components/List/List\";\nimport axios from 'axios';\nimport FireIcon from '../img/icon.svg';\n\nvar _ = require('lodash');\n\nconst Home = ({ id, fetchedUser, hash, optionsList, setActiveModal, friends, setUpd, openModalCard, setFilter, filter }) => {\n\tconst [searchValue, setSearchValue] = useState('');\n\n\tvar opts = optionsList;\n\n\tfunction getText(uid) {\n\t\ttry {\n\t\t\tfor (var i = 0; i < friends.length; i++) {\n\t\t\t\tif (friends[i].id === uid) break;\n\t\t\t}\n\t\t\tif (!friends[i].options.length) {\n\t\t\t\treturn 'Нет свойств';\n\t\t\t} else {\n\t\t\t\tlet o = [];\n\t\t\t\tfor (var j = 0; j < friends[i].options.length; j++) {\n\t\t\t\t\tvar op = friends[i].options[j];\n\t\t\t\t\to.push(opts[op['index']-1])\n\n\t\t\t\t}\n\t\t\t\treturn o.join(', ');\n\t\t\t}\n\t\t} catch (e) {}\n\n\t}\n\n\tfunction getCaption(uid) {\n\t\ttry {\n\t\t\tfor (var i = 0; i < friends.length; i++) {\n\t\t\t\tif (friends[i].id === uid) break;\n\t\t\t}\n\t\t\tif (!friends[i].options.length) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\tlet o = [];\n\t\t\t\tfor (var j = 0; j < friends[i].options.length; j++) {\n\t\t\t\t\tvar op = friends[i].options[j];\n\t\t\t\t\tif (op.show) o.push(opts[op['index']-1]);\n\n\t\t\t\t}\n\t\t\t\tif (o.length) return 'Совпало: ' + o.join(', ');\n\t\t\t\telse return '';\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\tfunction drawCircle(draw) {\n\t\tvar el = document.getElementById(\"header-circle\");\n\t\tif (el) el.remove();\n\t\tif (draw) {\n\t\t\tel = document.createElement(\"img\");\n\t\t\tel.id = 'header-circle';\n\t\t\tel.src = FireIcon;\n\t\t\tel.onclick = function () {\n\t\t\t\tif (!filter['only_match']) {\n\t\t\t\t\tsetFilter({'sex': 0, 'age': {'from': 1, 'to': 100}, 'only_match': true});\n\t\t\t\t} else {\n\t\t\t\t\tsetFilter({'sex': 0, 'age': {'from': 1, 'to': 100}, 'only_match': false});\n\t\t\t\t}\n\t\t\t\tsetUpd(Math.random());\n\t\t\t};\n\t\t\tvar parent = document.getElementsByClassName(\"PanelHeader__content\")[1];\n\t\t\tif (!parent)  parent = document.getElementsByClassName(\"PanelHeader__content\")[0];\n\t\t\tparent.appendChild(el);\n\t\t\tvar x = el.getBoundingClientRect();\n\t\t\tconsole.log(x);\n\t\t\treturn;\n\t\t\tif (x.width !== x.height) {\n\t\t\t\tfor (var i = 2; i < 30; i++) {\n\t\t\t\t\tel.style.width = i+'px';\n\t\t\t\t\tx = el.getBoundingClientRect();\n\t\t\t\t\tif (x.width === x.height) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tfunction drawFriends() {\n\t\tvar result = [];\n\t\tvar draw_circle = false;\n\n\t\tvar fr = friends;\n\t\tif (searchValue) {\n\t\t\tvar search = searchValue.toLowerCase();\n\t\t\tfr = friends.filter((friend) => (friend.first_name + \" \" + friend.last_name).toLowerCase().indexOf(search) > -1);\n\t\t}\n\n\n\t\tfor (var i = 0; i < fr.length; i++) {\n\t\t\tvar friend = fr[i];\n\t\t\tif (!friend.options) return ;\n\t\t\tvar inc = friend.options.map((x) => {\n\t\t\t\tif (x.show && !x.checked) return 1;\n\t\t\t\telse return 0;\n\t\t\t}).includes(1);\n\t\t\tif (inc) draw_circle = true;\n\t\t\tresult.push(<RichCell\n\t\t\t\tbefore={<Avatar data-id={i} size={48} src={friend.photo_100} className={inc ? 'new-match' : 'no-new-match'} />}\n\t\t\t\tmultiline\n\t\t\t\tclassName=\"user-cell\"\n\t\t\t\tdata-uid={friend.id}\n\t\t\t\tcaption={getCaption(friend.id)}\n\t\t\t\tactions={\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Button mode=\"secondary\" onClick={openModalCard} data-ind={i} data-id={friend.id}>Изменить<span data-ind={i} data-id={friend.id}></span></Button>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t}\n\n\t\t\t\ttext={getText(friend.id)}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t\tif (e.target.dataset && e.target.dataset.id) {\n\t\t\t\t\t\tvar id = e.target.dataset.id;\n\t\t\t\t\t\taxios.get(backend_url+'check?uid='+fetchedUser.id+'&check_id='+fr[id].id+'&uid='+fetchedUser.id+'&hash='+hash).then((data) => {\n\t\t\t\t\t\t\tsetUpd(Math.random());\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{friend.first_name + \" \" + friend.last_name}\n\t\t\t</RichCell>);\n\t\t}\n\t\tdrawCircle(draw_circle);\n\t\treturn result;\n\t}\n\n\tfunction openModal() {\n\t\tsetActiveModal('modal');\n\t}\n\n\tfunction setSearch(e) {\n\t\tsetSearchValue(e.target.value);\n\t}\n\n\n\treturn (<Panel id={id}>\n\t\t\t<PanelHeader left={\n\t\t\t\t<Button className=\"header-button\" mode=\"tertiary\" onClick={() => {\n\t\t\t\t\topenModalCard(null);\n\t\t\t\t}}>Я всех люблю</Button>\n\t\t\t}>Между нами</PanelHeader>\n\t\t\t<Search\n\t\t\t\tvalue={searchValue}\n\t\t\t\tonChange={setSearch}\n\t\t\t\ticon={<Icon24Filter />}\n\t\t\t\tonIconClick={openModal}\n\t\t\t/>\n\t\t\t<Div className=\"friend-list\">\n\t\t\t\t<List>\n\t\t\t\t\t{drawFriends()}\n\t\t\t\t</List>\n\n\t\t\t</Div>\n\n\n\t\t</Panel>\n\t);\n};\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tfetchedUser: PropTypes.shape({\n\t\tphoto_200: PropTypes.string,\n\t\tfirst_name: PropTypes.string,\n\t\tlast_name: PropTypes.string,\n\t\tcity: PropTypes.shape({\n\t\t\ttitle: PropTypes.string,\n\t\t}),\n\t}),\n};\n\nexport default Home;\n","import bridge from '@vkontakte/vk-bridge';\r\n\r\nconst backend_url = 'https://flashlightservice.ml:5000/';\r\n\r\nasync function getFriends(at) {\r\n    // filter: {sex: 0, age: 0}\r\n    var res = await bridge.send(\"VKWebAppCallAPIMethod\", {\"method\": \"friends.get\",\r\n        \"request_id\": \"32test\", \"params\": {\"v\":\"5.124\", \"access_token\": at, \"count\": 10000, \"fields\": \"first_name,last_name,sex,bdate,photo_100\", \"order\": \"name\"}});\r\n\r\n    return res;\r\n}\r\n\r\nexport default getFriends;\r\nexport {backend_url};","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport Home from './panels/Home';\nimport axios from 'axios';\nimport getFriends, {backend_url} from \"./panels/utils\";\nimport {platform, IOS, ANDROID, ModalCard, FormLayout, ModalRoot, ModalPage} from '@vkontakte/vkui';\nimport Icon24Done from '@vkontakte/icons/dist/24/done';\nimport PanelHeaderButton from \"@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton\";\nimport Icon24Cancel from '@vkontakte/icons/dist/24/cancel';\nimport ModalPageHeader from \"@vkontakte/vkui/dist/components/ModalPageHeader/ModalPageHeader\";\nimport Select from \"@vkontakte/vkui/dist/components/Select/Select\";\nimport RangeSlider from \"@vkontakte/vkui/dist/components/RangeSlider/RangeSlider\";\nimport Cell from \"@vkontakte/vkui/dist/components/Cell/Cell\";\nimport Switch from \"@vkontakte/vkui/dist/components/Switch/Switch\";\nimport Checkbox from \"@vkontakte/vkui/dist/components/Checkbox/Checkbox\";\n\nconst osName = platform();\nconst IS_PLATFORM_IOS = osName === IOS;\nconst IS_PLATFORM_ANDROID = osName === ANDROID;\n\n\nfunction getParameterByName(name, url) {\n\tif (!url) url = window.location.href;\n\tname = name.replace(/[\\[\\]]/g, '\\\\$&');\n\tvar regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n\t\tresults = regex.exec(url);\n\tif (!results) return null;\n\tif (!results[2]) return '';\n\treturn decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nvar _ = require('lodash');\n\nconst App = () => {\n\t//const [activePanel, setActivePanel] = useState('home');\n\t//const [fetchedUser, setUser] = useState(null);\n\t//const [accessToken, setAccessToken] = useState('');\n\t////const [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\t//const [friends, setFriends] = useState([]);\n\t//const [optionsList, setOptionsList] = useState([]);\n\t//const [updateFriends, setUpdateFriends] = useState(0);\n\t//const [filter, setFilter] = useState({'sex': 'a', 'age': {'from': 1, 'to': 100}, 'only_match': false});\n\t//const [hash, setHash] = useState('');\n\t//const [activeModal, setActiveModal] = useState(null);\n//\n\t//const [sex, setSex] = useState(filter['sex']);\n\t//const [ageFrom, setAgeFrom] = useState(filter['age']['from']);\n\t//const [ageTo, setAgeTo] = useState(filter['age']['to']);\n\t//const [onlyMatch, setOnlyMatch] = useState(filter['only_match']);\n\t//const [vkFriends, setVkFriends] = useState([]);\n\t//const [upd, setUpd] = useState(0);\n\t//const [currentUserIndex, setCurrentUserIndex] = useState(0);\n\n\t/*\n\tuseEffect(() => {\n\t\tbridge.subscribe(({ detail: { type, data }}) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\n\t\tasync function fetchData() {\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\t\tsetUser(user);\n\t\t\tvar att = await bridge.send(\"VKWebAppGetAuthToken\", {\"app_id\": 7602116, \"scope\": \"friends\"});\n\t\t\tsetAccessToken(att.access_token);\n\t\t\taxios.get(backend_url+'auth?at='+att.access_token+'&uid='+user.id).then((data) => {\n\t\t\t\tsetHash(data.data);\n\t\t\t});\n\t\t\tsetPopout(null);\n\n\t\t\tvar param = getParameterByName('vk_are_notifications_enabled', null);\n\t\t\tconsole.log('N:', param);\n\t\t\tif (!param || !parseInt(param)) bridge.send(\"VKWebAppAllowNotifications\").then((data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\n\t\t}\n\t\t//fetchData();\n\t}, []);*/\n\t/*\n\tuseEffect(() => {\n\t\tsetSex(filter['sex']);\n\t\tsetAgeFrom(filter['age']['from']);\n\t\tsetAgeTo(filter['age']['to']);\n\t\tsetOnlyMatch(filter['only_match']);\n\t}, [filter]);\n\n\tuseEffect(() => {\n\t\tsetFilter({'sex': sex, 'age': {'from': ageFrom, 'to': ageTo}, 'only_match': onlyMatch});\n\t}, [sex, ageFrom, ageTo, onlyMatch]);\n\n\tuseEffect(() => {\n\t\taxios.get(backend_url+'get-options').then((data) => {\n\t\t\tsetOptionsList(data.data);\n\t\t});\n\t}, []);\n\n\tuseEffect( () => {\n\t\tif (accessToken.length) {\n\t\t\tgetFriends(accessToken).then((data) => {\n\t\t\t\tsetVkFriends(data.response.items);\n\n\t\t\t});\n\t\t}\n\n\t}, [accessToken]);\n\n\tuseEffect((fetchedUser, filter, friends, hash) => {\n\t\tif (fetchedUser) {\n\t\t\tconsole.log('upda');\n\t\t\taxios.post(backend_url+'get-friends?uid='+fetchedUser.id+'&hash='+hash, {'friends': vkFriends, 'uid': fetchedUser['id'], 'filter': filter},\n\t\t\t).then((data) => {\n\t\t\t\tconsole.log(data.data);\n\t\t\t\tif (!_.isEqual(data.data, friends)) setFriends(data.data);\n\t\t\t}).catch(() => {\n\t\t\t\tsetUpd(Math.random());\n\t\t\t});\n\t\t}\n\t}, [vkFriends, upd]);\n\n\tfunction timer() {\n\t\tsetUpd(Math.random());\n\t}\n\n\tuseEffect(() => {\n\t\tsetInterval(timer, 10000);\n\n\t\treturn function cleanup() {\n\t\t\tclearInterval(timer);\n\t\t};\n\t}, []);\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to);\n\t};\n\n\tfunction openModalCard(e) {\n\t\tif (e) {\n\t\t\tvar ind = e.target.children[0].dataset.ind;\n\t\t\tvar uid = e.target.children[0].dataset.id;\n\t\t\tconsole.log(uid);\n\t\t\tfor (var i = 0; i < friends.length; i++) {\n\t\t\t\tif (friends[i].id === parseInt(uid)) break;\n\t\t\t}\n\t\t\tlet friend = friends[i];\n\t\t\tif (!friend) return;\n\t\t\tlet o = friend.options;\n\n\t\t\tsetCurrentUserIndex(uid);\n\t\t\tsetTimeout(() => {\n\t\t\t\tfor (var i = 0; i < o.length; i++) {\n\t\t\t\t\tvar oid = o[i]['index'];\n\t\t\t\t\tdocument.getElementById(\"checkbox-\"+(oid-1)).checked = true;\n\t\t\t\t}\n\t\t\t}, 100);\n\t\t} else {\n\t\t\tsetCurrentUserIndex(null);\n\t\t}\n\t\tsetActiveModal(\"friend-options\");\n\t}\n\n\tfunction closeModal() {\n\t\tsetUpd(Math.random());\n\t\tsetActiveModal(null);\n\t}\n\n\tfunction closeModalCard() {\n\t\tsetActiveModal(null);\n\t}\n\n\tfunction applyModal() {\n\t\tvar checked_opts = [];\n\t\tfor (var i = 0; i < optionsList.length; i++) {\n\t\t\tvar el = document.getElementById(\"checkbox-\"+i);\n\t\t\tif (el.checked) {\n\t\t\t\tchecked_opts.push(i+1);\n\t\t\t}\n\t\t\tel.checked = false;\n\t\t}\n\n\t\tif (currentUserIndex != null) {\n\t\t\taxios.post(backend_url+'set-options?uid='+fetchedUser.id+'&hash='+hash, {'to': currentUserIndex, 'from': fetchedUser.id, 'options': checked_opts}).then(() => {\n\t\t\t\tsetUpd(Math.random());\n\t\t\t});\n\t\t} else {\n\t\t\tvar cells = [...document.getElementsByClassName(\"user-cell\")];\n\t\t\tvar users = cells.map((x) => parseInt(x.dataset.uid));\n\t\t\taxios.post(backend_url+'set-options?uid='+fetchedUser.id+'&hash='+hash, {'to': users, 'from': fetchedUser.id, 'options': checked_opts}).then(() => {\n\t\t\t\tsetUpd(Math.random());\n\t\t\t});\n\t\t}\n\t\tcloseModal();\n\n\t}\n\n\tconst modal = (<ModalRoot activeModal={activeModal} onClose={closeModal}>\n\t\t<ModalPage id=\"modal\" onClose={closeModal} header={<ModalPageHeader\n\t\t\tleft={IS_PLATFORM_ANDROID && <PanelHeaderButton onClick={closeModal}><Icon24Cancel /></PanelHeaderButton>}\n\t\t\tright={<PanelHeaderButton onClick={closeModal}>{IS_PLATFORM_IOS ? 'Готово' : <Icon24Done />}</PanelHeaderButton>}\n\t\t>\n\t\t\tФильтры\n\t\t</ModalPageHeader>}>\n\t\t\t<FormLayout>\n\t\t\t\t<Select top=\"Пол\" value={sex} onChange={(e) => {\n\t\t\t\t\tsetSex(e.target.value);\n\t\t\t\t}}>\n\t\t\t\t\t<option value=\"a\">Любой</option>\n\t\t\t\t\t<option value=\"m\">Мужской</option>\n\t\t\t\t\t<option value=\"f\">Женский</option>\n\t\t\t\t</Select>\n\t\t\t\t<RangeSlider\n\t\t\t\t\ttop=\"Возраст\"\n\t\t\t\t\tmin={1}\n\t\t\t\t\tmax={100}\n\t\t\t\t\tstep={1}\n\t\t\t\t\tdefaultValue={[ageFrom, ageTo]}\n\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\tsetAgeFrom(e[0]);\n\t\t\t\t\t\tsetAgeTo(e[1]);\n\t\t\t\t\t}}\n\t\t\t\t\tbottom={\"От \" + ageFrom + \" до \" + ageTo}\n\t\t\t\t/>\n\t\t\t\t<Cell asideContent={<Switch id=\"only-match\" checked={onlyMatch} onChange={(e) => {\n\t\t\t\t\tsetOnlyMatch(e.target.checked);\n\t\t\t\t}} />}>\n\t\t\t\t\tТолько совпадения\n\t\t\t\t</Cell>\n\t\t\t</FormLayout>\n\t\t</ModalPage>\n\n\t\t<ModalCard\n\t\t\tid=\"friend-options\"\n\t\t\tclassName=\"tst\"\n\t\t\theader=\"Выберите свойства\"\n\t\t\tonClose={closeModalCard}\n\t\t\tactions={[{title: 'Применить', mode: 'primary', action: applyModal}]}\n\t\t>\n\t\t\t<FormLayout>\n\t\t\t\t{(() => {\n\t\t\t\t\tlet a = [];\n\t\t\t\t\tfor (var i = 0; i < optionsList.length; i++) {\n\t\t\t\t\t\ta.push(<Checkbox id={'checkbox-'+i} key={'checkbox-'+i}>{optionsList[i]}</Checkbox>);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t})()}\n\t\t\t</FormLayout>\n\t\t</ModalCard>\n\t</ModalRoot>);*/\n\treturn <h1>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</h1>;\n\t/*return (\n\t\t<View activePanel={activePanel}  modal={modal}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser}\n\t\t\t\t    hash={hash}  optionsList={optionsList} setActiveModal={setActiveModal} friends={friends} setUpd={setUpd} openModalCard={openModalCard} setFilter={setFilter} filter={filter}  />\n\t\t\t</View>\n\t);*/\n};\n\nexport default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}